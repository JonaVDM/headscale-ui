/* tslint:disable */
/* eslint-disable */
/**
 * headscale/v1/headscale.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HeadscaleServiceMoveNodeBody,
  HeadscaleServiceSetTagsBody,
  RpcStatus,
  V1BackfillNodeIPsResponse,
  V1CreateApiKeyRequest,
  V1CreateApiKeyResponse,
  V1CreatePreAuthKeyRequest,
  V1CreatePreAuthKeyResponse,
  V1CreateUserRequest,
  V1CreateUserResponse,
  V1DebugCreateNodeRequest,
  V1DebugCreateNodeResponse,
  V1ExpireApiKeyRequest,
  V1ExpireNodeResponse,
  V1ExpirePreAuthKeyRequest,
  V1GetNodeResponse,
  V1GetNodeRoutesResponse,
  V1GetPolicyResponse,
  V1GetRoutesResponse,
  V1ListApiKeysResponse,
  V1ListNodesResponse,
  V1ListPreAuthKeysResponse,
  V1ListUsersResponse,
  V1MoveNodeResponse,
  V1RegisterNodeResponse,
  V1RenameNodeResponse,
  V1RenameUserResponse,
  V1SetPolicyRequest,
  V1SetPolicyResponse,
  V1SetTagsResponse,
} from '../models/index';
import {
    HeadscaleServiceMoveNodeBodyFromJSON,
    HeadscaleServiceMoveNodeBodyToJSON,
    HeadscaleServiceSetTagsBodyFromJSON,
    HeadscaleServiceSetTagsBodyToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1BackfillNodeIPsResponseFromJSON,
    V1BackfillNodeIPsResponseToJSON,
    V1CreateApiKeyRequestFromJSON,
    V1CreateApiKeyRequestToJSON,
    V1CreateApiKeyResponseFromJSON,
    V1CreateApiKeyResponseToJSON,
    V1CreatePreAuthKeyRequestFromJSON,
    V1CreatePreAuthKeyRequestToJSON,
    V1CreatePreAuthKeyResponseFromJSON,
    V1CreatePreAuthKeyResponseToJSON,
    V1CreateUserRequestFromJSON,
    V1CreateUserRequestToJSON,
    V1CreateUserResponseFromJSON,
    V1CreateUserResponseToJSON,
    V1DebugCreateNodeRequestFromJSON,
    V1DebugCreateNodeRequestToJSON,
    V1DebugCreateNodeResponseFromJSON,
    V1DebugCreateNodeResponseToJSON,
    V1ExpireApiKeyRequestFromJSON,
    V1ExpireApiKeyRequestToJSON,
    V1ExpireNodeResponseFromJSON,
    V1ExpireNodeResponseToJSON,
    V1ExpirePreAuthKeyRequestFromJSON,
    V1ExpirePreAuthKeyRequestToJSON,
    V1GetNodeResponseFromJSON,
    V1GetNodeResponseToJSON,
    V1GetNodeRoutesResponseFromJSON,
    V1GetNodeRoutesResponseToJSON,
    V1GetPolicyResponseFromJSON,
    V1GetPolicyResponseToJSON,
    V1GetRoutesResponseFromJSON,
    V1GetRoutesResponseToJSON,
    V1ListApiKeysResponseFromJSON,
    V1ListApiKeysResponseToJSON,
    V1ListNodesResponseFromJSON,
    V1ListNodesResponseToJSON,
    V1ListPreAuthKeysResponseFromJSON,
    V1ListPreAuthKeysResponseToJSON,
    V1ListUsersResponseFromJSON,
    V1ListUsersResponseToJSON,
    V1MoveNodeResponseFromJSON,
    V1MoveNodeResponseToJSON,
    V1RegisterNodeResponseFromJSON,
    V1RegisterNodeResponseToJSON,
    V1RenameNodeResponseFromJSON,
    V1RenameNodeResponseToJSON,
    V1RenameUserResponseFromJSON,
    V1RenameUserResponseToJSON,
    V1SetPolicyRequestFromJSON,
    V1SetPolicyRequestToJSON,
    V1SetPolicyResponseFromJSON,
    V1SetPolicyResponseToJSON,
    V1SetTagsResponseFromJSON,
    V1SetTagsResponseToJSON,
} from '../models/index';

export interface HeadscaleServiceBackfillNodeIPsRequest {
    confirmed?: boolean;
}

export interface HeadscaleServiceCreateApiKeyRequest {
    body: V1CreateApiKeyRequest;
}

export interface HeadscaleServiceCreatePreAuthKeyRequest {
    body: V1CreatePreAuthKeyRequest;
}

export interface HeadscaleServiceCreateUserRequest {
    body: V1CreateUserRequest;
}

export interface HeadscaleServiceDebugCreateNodeRequest {
    body: V1DebugCreateNodeRequest;
}

export interface HeadscaleServiceDeleteApiKeyRequest {
    prefix: string;
}

export interface HeadscaleServiceDeleteNodeRequest {
    nodeId: string;
}

export interface HeadscaleServiceDeleteRouteRequest {
    routeId: string;
}

export interface HeadscaleServiceDeleteUserRequest {
    id: string;
}

export interface HeadscaleServiceDisableRouteRequest {
    routeId: string;
}

export interface HeadscaleServiceEnableRouteRequest {
    routeId: string;
}

export interface HeadscaleServiceExpireApiKeyRequest {
    body: V1ExpireApiKeyRequest;
}

export interface HeadscaleServiceExpireNodeRequest {
    nodeId: string;
}

export interface HeadscaleServiceExpirePreAuthKeyRequest {
    body: V1ExpirePreAuthKeyRequest;
}

export interface HeadscaleServiceGetNodeRequest {
    nodeId: string;
}

export interface HeadscaleServiceGetNodeRoutesRequest {
    nodeId: string;
}

export interface HeadscaleServiceListNodesRequest {
    user?: string;
}

export interface HeadscaleServiceListPreAuthKeysRequest {
    user?: string;
}

export interface HeadscaleServiceListUsersRequest {
    id?: string;
    name?: string;
    email?: string;
}

export interface HeadscaleServiceMoveNodeRequest {
    nodeId: string;
    body: HeadscaleServiceMoveNodeBody;
}

export interface HeadscaleServiceRegisterNodeRequest {
    user?: string;
    key?: string;
}

export interface HeadscaleServiceRenameNodeRequest {
    nodeId: string;
    newName: string;
}

export interface HeadscaleServiceRenameUserRequest {
    oldId: string;
    newName: string;
}

export interface HeadscaleServiceSetPolicyRequest {
    body: V1SetPolicyRequest;
}

export interface HeadscaleServiceSetTagsRequest {
    nodeId: string;
    body: HeadscaleServiceSetTagsBody;
}

/**
 * 
 */
export class HeadscaleServiceApi extends runtime.BaseAPI {

    /**
     */
    async headscaleServiceBackfillNodeIPsRaw(requestParameters: HeadscaleServiceBackfillNodeIPsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1BackfillNodeIPsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['confirmed'] != null) {
            queryParameters['confirmed'] = requestParameters['confirmed'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/node/backfillips`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1BackfillNodeIPsResponseFromJSON(jsonValue));
    }

    /**
     */
    async headscaleServiceBackfillNodeIPs(requestParameters: HeadscaleServiceBackfillNodeIPsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1BackfillNodeIPsResponse> {
        const response = await this.headscaleServiceBackfillNodeIPsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * --- ApiKeys start ---
     */
    async headscaleServiceCreateApiKeyRaw(requestParameters: HeadscaleServiceCreateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CreateApiKeyResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling headscaleServiceCreateApiKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/apikey`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateApiKeyRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CreateApiKeyResponseFromJSON(jsonValue));
    }

    /**
     * --- ApiKeys start ---
     */
    async headscaleServiceCreateApiKey(requestParameters: HeadscaleServiceCreateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CreateApiKeyResponse> {
        const response = await this.headscaleServiceCreateApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * --- PreAuthKeys start ---
     */
    async headscaleServiceCreatePreAuthKeyRaw(requestParameters: HeadscaleServiceCreatePreAuthKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CreatePreAuthKeyResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling headscaleServiceCreatePreAuthKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/preauthkey`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreatePreAuthKeyRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CreatePreAuthKeyResponseFromJSON(jsonValue));
    }

    /**
     * --- PreAuthKeys start ---
     */
    async headscaleServiceCreatePreAuthKey(requestParameters: HeadscaleServiceCreatePreAuthKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CreatePreAuthKeyResponse> {
        const response = await this.headscaleServiceCreatePreAuthKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * --- User start ---
     */
    async headscaleServiceCreateUserRaw(requestParameters: HeadscaleServiceCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1CreateUserResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling headscaleServiceCreateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1CreateUserRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CreateUserResponseFromJSON(jsonValue));
    }

    /**
     * --- User start ---
     */
    async headscaleServiceCreateUser(requestParameters: HeadscaleServiceCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1CreateUserResponse> {
        const response = await this.headscaleServiceCreateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * --- Node start ---
     */
    async headscaleServiceDebugCreateNodeRaw(requestParameters: HeadscaleServiceDebugCreateNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DebugCreateNodeResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling headscaleServiceDebugCreateNode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/debug/node`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1DebugCreateNodeRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DebugCreateNodeResponseFromJSON(jsonValue));
    }

    /**
     * --- Node start ---
     */
    async headscaleServiceDebugCreateNode(requestParameters: HeadscaleServiceDebugCreateNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DebugCreateNodeResponse> {
        const response = await this.headscaleServiceDebugCreateNodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceDeleteApiKeyRaw(requestParameters: HeadscaleServiceDeleteApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['prefix'] == null) {
            throw new runtime.RequiredError(
                'prefix',
                'Required parameter "prefix" was null or undefined when calling headscaleServiceDeleteApiKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/apikey/{prefix}`.replace(`{${"prefix"}}`, encodeURIComponent(String(requestParameters['prefix']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async headscaleServiceDeleteApiKey(requestParameters: HeadscaleServiceDeleteApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.headscaleServiceDeleteApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceDeleteNodeRaw(requestParameters: HeadscaleServiceDeleteNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['nodeId'] == null) {
            throw new runtime.RequiredError(
                'nodeId',
                'Required parameter "nodeId" was null or undefined when calling headscaleServiceDeleteNode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/node/{nodeId}`.replace(`{${"nodeId"}}`, encodeURIComponent(String(requestParameters['nodeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async headscaleServiceDeleteNode(requestParameters: HeadscaleServiceDeleteNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.headscaleServiceDeleteNodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceDeleteRouteRaw(requestParameters: HeadscaleServiceDeleteRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['routeId'] == null) {
            throw new runtime.RequiredError(
                'routeId',
                'Required parameter "routeId" was null or undefined when calling headscaleServiceDeleteRoute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/routes/{routeId}`.replace(`{${"routeId"}}`, encodeURIComponent(String(requestParameters['routeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async headscaleServiceDeleteRoute(requestParameters: HeadscaleServiceDeleteRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.headscaleServiceDeleteRouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceDeleteUserRaw(requestParameters: HeadscaleServiceDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling headscaleServiceDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async headscaleServiceDeleteUser(requestParameters: HeadscaleServiceDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.headscaleServiceDeleteUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceDisableRouteRaw(requestParameters: HeadscaleServiceDisableRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['routeId'] == null) {
            throw new runtime.RequiredError(
                'routeId',
                'Required parameter "routeId" was null or undefined when calling headscaleServiceDisableRoute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/routes/{routeId}/disable`.replace(`{${"routeId"}}`, encodeURIComponent(String(requestParameters['routeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async headscaleServiceDisableRoute(requestParameters: HeadscaleServiceDisableRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.headscaleServiceDisableRouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceEnableRouteRaw(requestParameters: HeadscaleServiceEnableRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['routeId'] == null) {
            throw new runtime.RequiredError(
                'routeId',
                'Required parameter "routeId" was null or undefined when calling headscaleServiceEnableRoute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/routes/{routeId}/enable`.replace(`{${"routeId"}}`, encodeURIComponent(String(requestParameters['routeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async headscaleServiceEnableRoute(requestParameters: HeadscaleServiceEnableRouteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.headscaleServiceEnableRouteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceExpireApiKeyRaw(requestParameters: HeadscaleServiceExpireApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling headscaleServiceExpireApiKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/apikey/expire`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ExpireApiKeyRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async headscaleServiceExpireApiKey(requestParameters: HeadscaleServiceExpireApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.headscaleServiceExpireApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceExpireNodeRaw(requestParameters: HeadscaleServiceExpireNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ExpireNodeResponse>> {
        if (requestParameters['nodeId'] == null) {
            throw new runtime.RequiredError(
                'nodeId',
                'Required parameter "nodeId" was null or undefined when calling headscaleServiceExpireNode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/node/{nodeId}/expire`.replace(`{${"nodeId"}}`, encodeURIComponent(String(requestParameters['nodeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ExpireNodeResponseFromJSON(jsonValue));
    }

    /**
     */
    async headscaleServiceExpireNode(requestParameters: HeadscaleServiceExpireNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ExpireNodeResponse> {
        const response = await this.headscaleServiceExpireNodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceExpirePreAuthKeyRaw(requestParameters: HeadscaleServiceExpirePreAuthKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling headscaleServiceExpirePreAuthKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/preauthkey/expire`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ExpirePreAuthKeyRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async headscaleServiceExpirePreAuthKey(requestParameters: HeadscaleServiceExpirePreAuthKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.headscaleServiceExpirePreAuthKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceGetNodeRaw(requestParameters: HeadscaleServiceGetNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetNodeResponse>> {
        if (requestParameters['nodeId'] == null) {
            throw new runtime.RequiredError(
                'nodeId',
                'Required parameter "nodeId" was null or undefined when calling headscaleServiceGetNode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/node/{nodeId}`.replace(`{${"nodeId"}}`, encodeURIComponent(String(requestParameters['nodeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetNodeResponseFromJSON(jsonValue));
    }

    /**
     */
    async headscaleServiceGetNode(requestParameters: HeadscaleServiceGetNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetNodeResponse> {
        const response = await this.headscaleServiceGetNodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceGetNodeRoutesRaw(requestParameters: HeadscaleServiceGetNodeRoutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetNodeRoutesResponse>> {
        if (requestParameters['nodeId'] == null) {
            throw new runtime.RequiredError(
                'nodeId',
                'Required parameter "nodeId" was null or undefined when calling headscaleServiceGetNodeRoutes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/node/{nodeId}/routes`.replace(`{${"nodeId"}}`, encodeURIComponent(String(requestParameters['nodeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetNodeRoutesResponseFromJSON(jsonValue));
    }

    /**
     */
    async headscaleServiceGetNodeRoutes(requestParameters: HeadscaleServiceGetNodeRoutesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetNodeRoutesResponse> {
        const response = await this.headscaleServiceGetNodeRoutesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * --- Policy start ---
     */
    async headscaleServiceGetPolicyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetPolicyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/policy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetPolicyResponseFromJSON(jsonValue));
    }

    /**
     * --- Policy start ---
     */
    async headscaleServiceGetPolicy(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetPolicyResponse> {
        const response = await this.headscaleServiceGetPolicyRaw(initOverrides);
        return await response.value();
    }

    /**
     * --- Route start ---
     */
    async headscaleServiceGetRoutesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetRoutesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/routes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetRoutesResponseFromJSON(jsonValue));
    }

    /**
     * --- Route start ---
     */
    async headscaleServiceGetRoutes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetRoutesResponse> {
        const response = await this.headscaleServiceGetRoutesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceListApiKeysRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListApiKeysResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/apikey`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListApiKeysResponseFromJSON(jsonValue));
    }

    /**
     */
    async headscaleServiceListApiKeys(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListApiKeysResponse> {
        const response = await this.headscaleServiceListApiKeysRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceListNodesRaw(requestParameters: HeadscaleServiceListNodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListNodesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/node`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListNodesResponseFromJSON(jsonValue));
    }

    /**
     */
    async headscaleServiceListNodes(requestParameters: HeadscaleServiceListNodesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListNodesResponse> {
        const response = await this.headscaleServiceListNodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceListPreAuthKeysRaw(requestParameters: HeadscaleServiceListPreAuthKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListPreAuthKeysResponse>> {
        const queryParameters: any = {};

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/preauthkey`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListPreAuthKeysResponseFromJSON(jsonValue));
    }

    /**
     */
    async headscaleServiceListPreAuthKeys(requestParameters: HeadscaleServiceListPreAuthKeysRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListPreAuthKeysResponse> {
        const response = await this.headscaleServiceListPreAuthKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceListUsersRaw(requestParameters: HeadscaleServiceListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListUsersResponse>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListUsersResponseFromJSON(jsonValue));
    }

    /**
     */
    async headscaleServiceListUsers(requestParameters: HeadscaleServiceListUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListUsersResponse> {
        const response = await this.headscaleServiceListUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceMoveNodeRaw(requestParameters: HeadscaleServiceMoveNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1MoveNodeResponse>> {
        if (requestParameters['nodeId'] == null) {
            throw new runtime.RequiredError(
                'nodeId',
                'Required parameter "nodeId" was null or undefined when calling headscaleServiceMoveNode().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling headscaleServiceMoveNode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/node/{nodeId}/user`.replace(`{${"nodeId"}}`, encodeURIComponent(String(requestParameters['nodeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HeadscaleServiceMoveNodeBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1MoveNodeResponseFromJSON(jsonValue));
    }

    /**
     */
    async headscaleServiceMoveNode(requestParameters: HeadscaleServiceMoveNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1MoveNodeResponse> {
        const response = await this.headscaleServiceMoveNodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceRegisterNodeRaw(requestParameters: HeadscaleServiceRegisterNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1RegisterNodeResponse>> {
        const queryParameters: any = {};

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['key'] != null) {
            queryParameters['key'] = requestParameters['key'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/node/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1RegisterNodeResponseFromJSON(jsonValue));
    }

    /**
     */
    async headscaleServiceRegisterNode(requestParameters: HeadscaleServiceRegisterNodeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1RegisterNodeResponse> {
        const response = await this.headscaleServiceRegisterNodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceRenameNodeRaw(requestParameters: HeadscaleServiceRenameNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1RenameNodeResponse>> {
        if (requestParameters['nodeId'] == null) {
            throw new runtime.RequiredError(
                'nodeId',
                'Required parameter "nodeId" was null or undefined when calling headscaleServiceRenameNode().'
            );
        }

        if (requestParameters['newName'] == null) {
            throw new runtime.RequiredError(
                'newName',
                'Required parameter "newName" was null or undefined when calling headscaleServiceRenameNode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/node/{nodeId}/rename/{newName}`.replace(`{${"nodeId"}}`, encodeURIComponent(String(requestParameters['nodeId']))).replace(`{${"newName"}}`, encodeURIComponent(String(requestParameters['newName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1RenameNodeResponseFromJSON(jsonValue));
    }

    /**
     */
    async headscaleServiceRenameNode(requestParameters: HeadscaleServiceRenameNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1RenameNodeResponse> {
        const response = await this.headscaleServiceRenameNodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceRenameUserRaw(requestParameters: HeadscaleServiceRenameUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1RenameUserResponse>> {
        if (requestParameters['oldId'] == null) {
            throw new runtime.RequiredError(
                'oldId',
                'Required parameter "oldId" was null or undefined when calling headscaleServiceRenameUser().'
            );
        }

        if (requestParameters['newName'] == null) {
            throw new runtime.RequiredError(
                'newName',
                'Required parameter "newName" was null or undefined when calling headscaleServiceRenameUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/{oldId}/rename/{newName}`.replace(`{${"oldId"}}`, encodeURIComponent(String(requestParameters['oldId']))).replace(`{${"newName"}}`, encodeURIComponent(String(requestParameters['newName']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1RenameUserResponseFromJSON(jsonValue));
    }

    /**
     */
    async headscaleServiceRenameUser(requestParameters: HeadscaleServiceRenameUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1RenameUserResponse> {
        const response = await this.headscaleServiceRenameUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceSetPolicyRaw(requestParameters: HeadscaleServiceSetPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1SetPolicyResponse>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling headscaleServiceSetPolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/policy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1SetPolicyRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SetPolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async headscaleServiceSetPolicy(requestParameters: HeadscaleServiceSetPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1SetPolicyResponse> {
        const response = await this.headscaleServiceSetPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async headscaleServiceSetTagsRaw(requestParameters: HeadscaleServiceSetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1SetTagsResponse>> {
        if (requestParameters['nodeId'] == null) {
            throw new runtime.RequiredError(
                'nodeId',
                'Required parameter "nodeId" was null or undefined when calling headscaleServiceSetTags().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling headscaleServiceSetTags().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/node/{nodeId}/tags`.replace(`{${"nodeId"}}`, encodeURIComponent(String(requestParameters['nodeId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HeadscaleServiceSetTagsBodyToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SetTagsResponseFromJSON(jsonValue));
    }

    /**
     */
    async headscaleServiceSetTags(requestParameters: HeadscaleServiceSetTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1SetTagsResponse> {
        const response = await this.headscaleServiceSetTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
